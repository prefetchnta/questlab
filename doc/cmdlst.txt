
（一）CMD 命令列表

（1）应用程序命令

    app:exit
        程序退出命令
            qcmd:app:exit   只针对 QstCmdz 部件
            qcom:app:exit   只针对 QstComm 部件
            qdat:app:exit   只针对 QstData 部件
            qedt:app:exit   只针对 QstText 部件
            qhsh:app:exit   只针对 QstHash 部件
            qidx:app:exit   只针对 QstIndex 部件
            qinf:app:exit   只针对 QstInfoz 部件
            qxmm:app:exit   只针对 QstMedia 部件
            qmnt:app:exit   只针对 QstMount 部件
            qmnu:app:exit   只针对 QstMenu 部件
            qsrv:app:exit   只针对 QstServ 部件
            qtee:app:exit   只针对 QstTree 部件
            qv2d:app:exit   只针对 QstView2D 部件
    cfg:load
        重新加载配置文件
    app:reset
        清除应用程序当前加载的内容

（2）窗口控制命令

    win:load
        重新加载窗口位置
    win:save
        保存当前窗口位置
    win:show
        显示当前窗口，窗口拉到最前面
            qcmd:win:show   只针对 QstCmdz 部件
            qcom:win:show   只针对 QstComm 部件
            qdat:win:show   只针对 QstData 部件
            qedt:win:show   只针对 QstText 部件
            qhsh:win:show   只针对 QstHash 部件
            qidx:win:show   只针对 QstIndex 部件
            qinf:win:show   只针对 QstInfoz 部件
            qxmm:win:show   只针对 QstMedia 部件
            qmnt:win:show   只针对 QstMount 部件
            qmnu:win:show   只针对 QstMenu 部件
            qsrv:win:show   只针对 QstServ 部件
            qtee:win:show   只针对 QstTree 部件
            qv2d:win:show   只针对 QstView2D 部件

（3）插件管理命令

    ext:free
        释放所有加载的插件
            g2d:ext:free    只针对二维图像功能的部件
            pak:ext:free    只针对封包加载功能的部件
            edt:ext:free    只针对文本加载功能的部件
            xmm:ext:free    只针对媒体播放功能的部件

    ext:load <插件路径>
        加载一个 FMTZ 引擎插件
            g2d:ext:load    只针对二维图像功能的部件
            pak:ext:load    只针对封包加载功能的部件
            edt:ext:load    只针对文本加载功能的部件
            xmm:ext:load    只针对媒体播放功能的部件

    qv2d:cmd:load <插件路径>
        加载一个 QstView2D 用的命令扩展插件

    qv2d:flt:load [脚本路径]
        加载一个 QstView2D 用的滤镜执行脚本，省略参数表示取消当前滤镜

（4）文件加载命令

    ldr:free
        删除所有已经挂载的封包文件节点，并清除已加载的资源共享文件

    ldr:file <文件路径> [头偏移] [尾偏移] [编码] [节点地址] [备注]
        加载解析一个磁盘文件，节点地址参数为封包文件专用参数
            qedt:ldr:file   只针对 QstText 部件
            qv2d:ldr:file   只针对 QstView2D 部件

    ldr:smem <共享名> <文件大小> <文件名> [头偏移] [尾偏移] [编码] [备注]
        加载解析一个内存共享文件，文件名只是用来实现扩展名匹配的
            qedt:ldr:smem   只针对 QstText 部件
            qv2d:ldr:smem   只针对 QstView2D 部件

    ldr:pack <挂载名> <文件名> [头偏移] [尾偏移] [编码] [节点地址] [备注]
        加载解析一个封包内的文件，挂载名为封包的挂载名称

（5）资源管理命令

    res:root <根目录路径>
        设置资源路径的根目录字符串，用于把绝对路径转成相对路径
        （最后不保证有 slash 结尾，请自行判断并加上）

    res:load <标识名> <挂载名> <文件名> [编码]
        加载一个封包内的文件到资源文件列表（共享名称同标识名）

    res:free <标识名>
        释放指定的已经加载的资源共享文件

    res:okay <标识名> <文件大小>
        通知别人指定的资源共享文件已经建立完成

    res:fail <标识名>
        通知别人指定的资源共享文件建立失败

    res:router [插件路径]
        加载一个外部资源路由插件，不指定参数表示卸载当前路由插件

（6）目录树的命令

    dir:clear
        释放并清除当前加载的文件列表（现在改成不发送 ldr:free 命令）

    dir:load [文件导入表]
        加载 XML 形式的文件导入列表，不指定文件名默认为 output/__dir__.xml

（7）索引控制命令

    idx:get_now [当前序号]
        设置索引的当前值，默认为0

    idx:get_min [最小序号]
        设置索引范围的最小值，默认为0

    idx:get_max [最大序号]
        设置索引范围的最大值，默认为0

    idx:set_now [索引序号]
        对目标设置索引的当前序号，默认为0，对于图片来讲就是图片帧号

（8）文本信息命令

    txt:clear [0/1] [信息编号]
        清除指定的文本信息，参数一=0表示清主要信息，=1表示清次要信息
        省略参数表示清除全部文本信息

（9）图片控制命令

    g2d:clear
        清除当前显示的图片

    g2d:alpha
        图片显示切换到 Alpha 通道

    g2d:color
        图片显示切换到 Color 通道

    g2d:canvas <画布宽> <画布高>
        创建图片绘制画布，不能与加载的文件内容共存

    g2d:refresh
        刷新当前显示的图片内容（包括绘图画布内容）

    g2d:save <文件名> [...]
        保存当前打开图片的当前帧内容（文件类型由扩展名和对应的插件决定）

    g2d:saveall <文件名> [...]
        保存当前打开图片的所有帧内容（保存图片的附加参数从后面传入）

    g2d:savenow <文件名> [...]
        保存当前显示图片的颜色通道和透明通道（保存图片的附加参数从后面传入）

    g2d:grub <文件名> [...]
        保存当前显示图片的最小可视矩形框（保存图片的附加参数从后面传入）

    g2d:grab <X> <Y> <Width> <Height> <文件名> [...]
        显示图片局部保存（保存图片的附加参数从后面传入）

    g2d:zoom <X> <Y> <Width> <Height> <Scale> <Lerp> <文件名> [...]
        显示图片缩放保存（保存图片的附加参数从后面传入）
            Scale   图片缩放的比例
            Lerp    是否双线性插值

    g2d:rote <X> <Y> <Width> <Height> <CCW> <Lerp> <文件名> [...]
        显示图片旋转保存（保存图片的附加参数从后面传入）
            CCW     逆时针旋转角度
            Lerp    是否双线性插值

    g2d:rotz <X> <Y> <Width> <Height> <CCW> <Scale> <Lerp> <文件名> [...]
        显示图片缩放旋转保存（保存图片的附加参数从后面传入）
            CCW     逆时针旋转角度
            Scale   图片缩放的比例
            Lerp    是否双线性插值

    g2d:tile <TileW> <TileH> <StepX> <StepY> <文件名> [...]
        显示图片切片保存（保存图片的附加参数从后面传入）
            TileW   TileH   切片大小
            StepX   StepY   切片步进

（10）媒体控制命令

    xmm:clear
        停止播放媒体并清除当前加载

（11）编辑控制命令

    edt:clear
        清除文本编辑器里的所有内容

    edt:cpage <编码>
        指定加载文件的默认文本编码，具有最高的优先级，0表示取消默认编码

    edt:filter [文件名匹配列表]
        设置文本文件名匹配列表，用 | 分割各个通配符，省略参数表示清除列表

（12）直接数据命令

    hex:type <类型>
        设置16进制数据串的解析类型

    hex:mode <模式>
        设置16进制数据串的解析模式

    hex:in_le <16进制串>
        发送一串16进制数据串到目标部件，小端模式解析

    hex:in_be <16进制串>
        发送一串16进制数据串到目标部件，大端模式解析

（13）通讯控制命令

    com:clear
        清除当前通讯接收文本框

    com:close
        关闭当前打开的通讯端口

    com:rs232 <串口号> [波特率] [数据位] [校验位] [停止位]
        打开 RS232 通讯端口
            波特率  110/300/600/1200/2400/4800/9600/14400
                    19200/38400/57600/115200/128000/256000
            数据位  4/5/6/7/8
            校验位  no/odd/even/mark/space
            停止位  1/1.5/2
        默认模式为：115200, 8, no, 1

    com:tcpv4 <目标地址> <端口号>
        打开 TCPv4 通讯端口，地址可 IP 或域名，端口号0-65535

    com:udpv4 <目标地址> <端口号>
        打开 UDPv4 通讯端口，地址可 IP 或域名，端口号0-65535

    com:stype <发送模式/插件名称> [函数名称]
        数据/命令的发送模式，即发送前的数据变换
            text    直接发送模式（默认）
            hex     16进制字符串发送模式
            esc     C 转义字符串发送模式
            dos     字符串后跟 \r\n 发送模式
            unix    字符串后跟 \n 发送模式
            mac     字符串后跟 \r 发送模式

    com:rtype <接收模式/插件名称> [函数名称]
        数据/命令的接收模式，即接收后的数据渲染显示模式
            text    文本显示模式（默认）
            html    HTML 显示模式
            hex     16进制显示模式，可显示二进制数据
            ansi    使用 ANSI 颜色属性代码的文本显示模式

    com:cpage <编码>
        指定显示字符的编码，0表示当前系统的编码，只支持多字节编码

    com:tmout <断流超时> [连接超时]
        设置通讯的两个超时时间，负数表示保留原值不设置

    com:flush <断流大小>
        设置通讯字节流的断流大小，字节数大于等于强制刷新

（二）INI 命令列表

（1）文本信息命令

    info::main="?> ... "
        设置主要信息文本，？为信息编号，文本行会根据信息编号排序

    info::subs="?> ... "
        设置次要信息文本，？为信息编号，文本行会根据信息编号排序

    部件使用的信息编号值
        0 - 一般信息    1 - QstView2D   2 - QstMount
        3 - QstMedia    4 - QstText

（三）CrHackSet 绘图命令列表

    crh:init
        目前没用干任何事情

    crh:color <Red> <Green> <Blue> [Alpha]
        设置当前绘制前景色，Alpha 默认为255，缺省为黑色

    crh:mode <Mode>
        设置当前绘制模式
            set - 直接绘制（默认）  lrp - 插值绘制
            add - 饱和加法          sub - 饱和减法
            xor - 异或绘制          and - [与]绘制
            orr - [或]绘制          not - 取反绘制/Alpha 混合/目标关键色

    crh:moveto <X> <Y>
        设置当前绘制点的坐标，启动时为 (0, 0)

    crh:lineto <X> <Y>
        从当前点绘制直线到目标点，并移动当前点到目标点

    crh:pixel <X> <Y>
        在指定点处绘制一个像素

    crh:dotwu <X> <Y>
        在指定点处绘制一个 Wu 像素

    crh:line <X1> <Y1> <X2> <Y2>
        绘制一条指定的直线

    crh:lines <X1> <Y1> <X2> <Y2> ...
        绘制一组指定的直线

    crh:polygon <Fill> <X1> <Y1> <X2> <Y2> ...
        绘制一个封闭的多边形

    crh:bezier <Step> <X1> <Y1> <X2> <Y2> <X3> <Y3> <X4> <Y4> ...
        绘制拟合的多次贝塞尔曲线

    crh:curve3 <Step> <Tension> <X1> <Y1> <X2> <Y2> <X3> <Y3> <X4> <Y4> ...
        绘制插值的三次贝塞尔曲线

    crh:rect_xy <X1> <Y1> <X2> <Y2>
        以坐标的方式绘制一个方框

    crh:rect_wh <X> <Y> <Width> <Height>
        以宽高的方式绘制一个方框

    crh:circle <X> <Y> <Radius> [Fill]
        绘制一个指定的正圆，默认不填充颜色

    crh:ellps_xy <X1> <Y1> <X2> <Y2> [Fill]
        以坐标的方式绘制一个椭圆，默认不填充颜色

    crh:ellps_wh <X> <Y> <Width> <Height> [Fill]
        以宽高的方式绘制一个椭圆，默认不填充颜色

    crh:fill_xy <X1> <Y1> <X2> <Y2>
        以坐标的方式绘制一个填充

    crh:fill_wh <X> <Y> <Width> <Height>
        以宽高的方式绘制一个填充

    crh:fill_shp <X> <Y>
        填充一个封闭区域

    crh:bkcolor <Red> <Green> <Blue> [Alpha]
        设置当前绘制背景色，Alpha 默认为255，缺省为白色

    crh:ucfont <Size> <XSpace> <YSpace> [Suffix]
        切换到 UCDOS 点阵字库文字绘制模式，加载的字库文件为：
            ./source/ucfont/ASC[Size]           ASCII 字库
            ./source/ucfont/HZK[Size]T          符号点阵字库
            ./source/ucfont/HZK[Size][Suffix]   汉字点阵字库
        XSpace 与 YSpace 为行间距

    crh:btfont <Size> <XSpace> <YSpace> <Type>
        切换到自定义点阵字库文字绘制模式，加载的字库文件为：
            ./source/btfont/[Type]_[Size].half  ASCII 字库
            ./source/btfont/[Type]_[Size].full  汉字点阵字库
        XSpace 与 YSpace 为行间距，目前 Type 只支持 GBK 与 GB2312

    crh:texts <X> <Y> <EscText> [Width Height Align]
        使用当前文字绘制对象绘制背景填充的文字，EscText 为支持 C 转义的字符串
        Align 为文字的对齐方式，可取的值为（上下两排可以相加组合）：
            1 - 水平左对齐      2 - 水平右对齐      3 - 水平中对齐
            4 - 垂直顶对齐      8 - 垂直底对齐     12 - 垂直中对齐

    crh:textt <X> <Y> <EscText> [Width Height Align]
        同命令 crh:texts，只是绘制模式为背景透明模式（不用背景色填充）

    crh:sleep <TimeMS>
        延时一段时间，单位：毫秒

    crh:winfont <Height> <FaceName> [Weight] [Width] [CharSet] [Quality]
                [Italic] [Underline] [StrikeOut] [Escapement] [Orientation]
        切换到 GDI 文字绘制模式，输入的参数对应到 LOGFONT 结构的相应成员

    crh:trans <Red> <Green> <Blue> [Alpha]
        设置当前绘制关键色，Alpha 默认为255，缺省为0

    crh:loadres <ResFile> [RootDir]
        加载外部资源描述文件（一个 XML 文件），缺省的资源根目录为当前目录

    crh:blit <X> <Y> <SpriteName> [Index] [Width Height Align]
        绘制指定的精灵（精灵在资源描述文件里指定），Index 为多帧图片的帧号
        缺省值为0，Align 指定精灵在目标框内的对齐方式，其值详见文字输出命令
            当前绘制关键色为0的时候，not 绘制模式对应 Alpha 通道混合模式
                否则对应目标关键色绘制模式，set 模式对应源关键色绘制模式

    crh:blit2 <SpriteName> <RectName> <Align> [Index]
        同命令 crh:blit，只是目标矩形框由资源描述文件指定

    crh:rect_ex <RectName>
        绘制一个方框，坐标参数由资源描述文件指定

    crh:fill_ex <RectName>
        绘制一个填充，坐标参数由资源描述文件指定

    crh:texts_ex <EscText/TextName> <RectName> <Align> [IsTextName]
        同命令 crh:texts，只是目标框和文本内容可以由资源描述文件指定

    crh:textt_ex <EscText/TextName> <RectName> <Align> [IsTextName]
        同命令 crh:textt，只是目标框和文本内容可以由资源描述文件指定

（四）OpenCV 绘图命令列表

    ocv:init
        目前没用干任何事情

    ocv:color <Red> <Green> <Blue> [Alpha]
        设置当前绘制前景色，Alpha 默认为255，缺省为黑色

    ocv:width <Width>
        设置当前绘制线条的宽度，默认为1

    ocv:tline <Type>
        设置当前绘制线条的类型，默认为8，可取4/8/16（CV_AA）

    ocv:moveto <X> <Y>
        设置当前绘制点的坐标，启动时为 (0, 0)

    ocv:lineto <X> <Y>
        从当前点绘制直线到目标点，并移动当前点到目标点

    ocv:line <X1> <Y1> <X2> <Y2>
        绘制一条指定的直线

    ocv:rect_xy <X1> <Y1> <X2> <Y2>
        以坐标的方式绘制一个方框

    ocv:rect_wh <X> <Y> <Width> <Height>
        以宽高的方式绘制一个方框

    ocv:circle <X> <Y> <Radius>
        绘制一个指定的正圆

    ocv:ellps_arc <X> <Y> <Width> <Height> <fAngle> <fStartAngle> <fEndAngle>
        以圆弧的方式绘制一个椭圆/圆弧

    ocv:ellps_agl <X> <Y> <Width> <Height> <fAngle>
        以角度的方式绘制一个椭圆/圆弧

    ocv:text <X> <Y> <FontFace> <fFontScale> <EscText>
        绘制一段指定的文字（目前只支持字母），FontFace 可取值为：
            CV_FONT_HERSHEY_SIMPLEX        = 0
            CV_FONT_HERSHEY_PLAIN          = 1
            CV_FONT_HERSHEY_DUPLEX         = 2
            CV_FONT_HERSHEY_COMPLEX        = 3
            CV_FONT_HERSHEY_TRIPLEX        = 4
            CV_FONT_HERSHEY_COMPLEX_SMALL  = 5
            CV_FONT_HERSHEY_SCRIPT_SIMPLEX = 6
            CV_FONT_HERSHEY_SCRIPT_COMPLEX = 7
            CV_FONT_ITALIC                 + 16
